syntax = "proto3";

option go_package = "protobuf/serverMessages";
option java_package = "club.thom.tem.models.messages";
package serverMessage;



message AuthData {
  // true if authenticated successfully, false otherwise.
  bool success = 1;

  // reason for success message
  enum Reason {
    SUCCESS = 0;
    BLACKLISTED = 1;
    INVALID = 2;
    OUTDATED_CLIENT = 3;
    INVALID_UUID = 4;
  }
  Reason reason = 2;
}

message InformationResponse {
  // Player who the information is about
  string playerUuid = 1;

  // invalid + valid contributions
  int32 contributionsThisSession = 2;
  // valid contributions only
  int32 validContributionsThisSession = 3;

  // total valid contributions
  int32 totalContributions = 4;

}

message FriendRequest {
  // Player uuid to lookup from
  string uuid = 1;
}

message InventoryRequest {
  // Player uuid to lookup from
  string playerUuid = 1;
}

message MiscRequest {
  // future proofing, to manually ask a client to make a request (limits compulsory updates)
  string requestURL = 1;
  // Whether the client should add their api key as a parameter
  bool useApiKey = 2;
  map<string, string> parameters = 3;
}

message RequestMessage {
  // nonce to be acknowledged in Responses
  int32 nonce = 1;
  map<string, string> headers = 2;
  string requestScheme = 3;
  oneof message {
    FriendRequest friendRequest = 4;
    InventoryRequest inventoryRequest = 5;
    MiscRequest miscRequest = 6;
  }
}

message BulkRequests {
  // List of requests
  repeated RequestMessage requests = 1;
}

enum Rarity {
  COMMON = 0;
  UNCOMMON = 1;
  RARE = 2;
  EPIC = 3;
  LEGENDARY = 4;
  MYTHIC = 5;
  DIVINE = 6;
  SPECIAL = 7;
  VERY_SPECIAL = 8;
}

message ArmourSnipe {
  string itemId = 1;
  string hexCode = 2;
  Rarity rarity = 3;
  int64 price = 4;
  string extraData = 5;
}

message SniperMessage {
  string auctionUuid = 1;
  string auctioneerUuid = 2;
  oneof message {
    ArmourSnipe armour = 3;
  }
}


message ServerMessage {
  // Client version expected (most up-to-date client version)
  int32 expectedClientVersion = 1;
  oneof message {
    AuthData auth = 2;
    BulkRequests multipleRequests = 3;
    RequestMessage singleRequest = 4;
    InformationResponse info = 5;
    SniperMessage snipe = 6;
  }
}
